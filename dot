#!/bin/bash
set -euo pipefail

echo "@ targetConfig: ${XDG_CONFIG_HOME:=${HOME}/.config}"

declare -A payload=(
	["app/dev/git"]="${XDG_CONFIG_HOME}/git"
	["app/wm/hypr"]="${XDG_CONFIG_HOME}/hypr"
	["app/editor/neovim"]="${XDG_CONFIG_HOME}/nvim"
	["app/editor/helix"]="${XDG_CONFIG_HOME}/helix"
	["app/term/alacritty"]="${XDG_CONFIG_HOME}/alacritty"
	["app/term/wezterm"]="${XDG_CONFIG_HOME}/wezterm"
	["app/etc/fontconfig"]="${XDG_CONFIG_HOME}/fontconfig"
	["app/shell/zsh/config"]="${HOME}/.zshrc"
	["app/etc/user-dirs"]="${XDG_CONFIG_HOME}/user-dirs.dirs"
	["app/wm/mako"]="${XDG_CONFIG_HOME}/mako"
)

DoInstall() {
	echo "==> Installing..."

	for key in ${!payload[@]}; do
		value="${payload[$key]}"
		printf " = wait: $(basename $key)\r"

		if test -e $value; then
			printf " = err \r"
			true
		else
			ln -s "$(realpath $key)" "$value"
			printf " = ok  \r"
		fi

		echo
	done
}

DoUninstall() {
	echo "==> Uninstalling..."

	for key in ${!payload[@]}; do
		value="${payload[$key]}"
		printf " = wait: $(basename $key)\r"

		if test -e $value; then
			unlink $value
			printf " = ok  \r"
		else
			printf " = err \r"
		fi

		echo
	done
}

DoList() {
	echo "==> Listing..."

	for key in ${!payload[@]}; do
		value="${payload[$key]}"

		printf " %40s <-- %s\n" "$value" "$key"
	done
}

case "${1:-help}" in
install)
	shift
	DoInstall "$@"
	;;
uninstall)
	shift
	DoUninstall "$@"
	;;
list)
	DoList "$@"
	;;
*)
	echo "
dot v0.1.0 - Manage dotfiles
COMMANDS:
	install) Install dotfiles 
	uninstall) Uninstall dotfiles
	list) List dotfiles"
	;;
esac
